<?php
use \Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Component\Serialization\Json;
use Drupal\block_content\Entity\BlockContent;


/**
 * @file
 * Functions to support theming in the Athena theme.
 */

function athena_preprocess_block(array &$variables) {

    $universityContentType = 'universities';
    $universityQuery = \Drupal::entityQuery('node');
    $universityQuery->condition('status', 1);
    $universityQuery->condition('type', $universityContentType);
    $universityData = $universityQuery->execute();

    foreach($universityData as $univNid) {
      $univNodeData = Node::load($univNid);
      $logoPath = file_create_url($univNodeData->get('field_logo')->entity->uri->value);
      $logoRelativepath = file_url_transform_relative($logoPath);
      $univDataArr[$univNid] = array(
       'nid' => $univNid,
       'univkey' => $univNodeData->get('field_university_key')->value,
       'label' => $univNodeData->label(),
       'logo'=> $logoRelativepath
      );
    }
    $variables['all_universities'] = $univDataArr;

    $bundle='course';
    $query = \Drupal::entityQuery('node');
    $query->condition('status', 1);
    //  $query->condition('field_course_academic_route', 'academic', 'CONTAINS');
    $query->condition('field_course_category', 'Academic');
    $query->condition('type', $bundle);
    $academic = $query->execute();


    $microquery = \Drupal::entityQuery('node');
    $microquery->condition('status', 1);
    $microquery->condition('field_course_category',  'Micro Credits', '=');
    $microquery->condition('type', $bundle);
    $micro = $microquery->execute();


    $querycertification = \Drupal::entityQuery('node');
    $querycertification->condition('status', 1);
    $querycertification->condition('field_course_category', 'Certifications', '=');
    $querycertification->condition('type', $bundle);
    $certifications = $querycertification->execute();
    $academic = node_load_multiple($academic);
    $academic_node_ids = array();
    foreach($academic as $node_key => $node) {
      $paragraph_univ_data = $node->field_link_universities->referencedEntities();
      $univ_logo = array();
      foreach($paragraph_univ_data as $explore_data) {
        $university_nid = $explore_data->get('field_university')->value;
        $find_univ_id = find_data_in_array($univ_logo, $university_nid);
        if (!empty($university_nid) && empty($find_univ_id)) {
          $univ_node = Node::load($university_nid);
          $univkey = $univ_node->get('field_university_key')->value;
          $logoPath = file_create_url($univ_node->get('field_logo')->entity->uri->value);
          $logoRelativepath = file_url_transform_relative($logoPath);
          $univ_logo[] = array(
           'label' => $univ_node->label(),
           'logo'=> $logoRelativepath,
           'nid' => $university_nid,
           'univkey' => $univkey
          );
        }


        $academicUnivArr[] = $university_nid;
      }
      $academic_node_ids[] =
        array(
          "nid"=>$node->id(),
          "title"=>$node->label(),
          'universities' => $univ_logo,
        );
    }


    $academicUnivIdsFilter = array_filter($academicUnivArr);
    $academicUnivIds = array_unique($academicUnivIdsFilter);
    if (count($academicUnivIds) > 0) {
      foreach ($academicUnivIds as $key => $value) {
        $academicUniversities[] = $univDataArr[$value];
      }
    }
    $variables['academic_universities'] = $academicUniversities;


    $variables['academicnodes'] = $academic_node_ids;

    $micro = node_load_multiple($micro);
    $academic_node_ids = array();
    foreach($micro as $node_key => $node) {
      $paragraph_univ_data = $node->field_link_universities->referencedEntities();

      $univ_logo = array();
      foreach($paragraph_univ_data as $explore_data) {
        $university_nid = $explore_data->get('field_university')->value;
        $find_univ_id = find_data_in_array($univ_logo, $university_nid);
        if (!empty($university_nid) && empty($find_univ_id)) {
          $univ_node = Node::load($university_nid);
          $univkey = $univ_node->get('field_university_key')->value;

          $logoPath = file_create_url($univ_node->get('field_logo')->entity->uri->value);
          $logoRelativepath = file_url_transform_relative($logoPath);

          $univ_logo[] = array(
            'label' => $univ_node->label(),
            'logo'=> $logoRelativepath,
            'nid' => $university_nid,
            'univkey' => $univkey
          );
        }
        $mcUnivArr[] = $university_nid;
      }
      $micro_node_ids[] =
      array(
        "nid"=>$node->id(),
        "title"=>$node->label(),
        'universities' => $univ_logo,
      );
    }

    $mcUnivIdsFilter = array_filter($mcUnivArr);
    $mcUnivIds = array_unique($mcUnivIdsFilter);
    if (count($mcUnivIds) > 0) {
      foreach ($mcUnivIds as $key => $value) {
        $mcUniversities[] = $univDataArr[$value];
      }
    }
    $variables['mc_universities'] = $mcUniversities;

    $variables['micronodes'] = $micro_node_ids;


    $certifications = node_load_multiple($certifications);
    $certifications_node_ids = array();
    foreach($certifications as $node_key => $node) {
      $paragraph_univ_data = $node->field_link_universities->referencedEntities();
      $univ_logo = array();
      foreach($paragraph_univ_data as $explore_data) {
        $university_nid = $explore_data->get('field_university')->value;

        $univ_node = Node::load($university_nid);
        $label_univ = '';
        $find_univ_id = find_data_in_array($univ_logo, $university_nid);
        if (!empty($university_nid) && is_object($univ_node) && empty($find_univ_id)) {
          $label_univ = $univ_node->label();
          $univkey = $univ_node->get('field_university_key')->value;
          $logoPath = file_create_url($univ_node->get('field_logo')->entity->uri->value);
          $logoRelativepath = file_url_transform_relative($logoPath);
          $univ_logo[] = array(
            'label' => $label_univ,
            'logo'=> $logoRelativepath,
            'nid' => $university_nid,
            'univkey' => $univkey
          );
        }
        $certificateUnivArr[] = $university_nid;
      }
      $certifications_node_ids[] =
      array(
        "nid"=>$node->id(),
        "title"=>$node->label(),
        'universities' => $univ_logo,
      );
    }

    $certificateUnivIdsFilter = array_filter($certificateUnivArr);
    $certificateUnivIds = array_unique($certificateUnivIdsFilter);
    if (count($certificateUnivIds) > 0) {
      foreach ($certificateUnivIds as $key => $value) {
        $certificateUniversities[] = $univDataArr[$value];
      }
    }
    $variables['certifications_universities'] = $certificateUniversities;

    // print "<pre>";
    // print_r($academicUniversities);
    // print_r($mcUniversities);
    // print_r($certificateUniversities);
    // exit;

    $variables['certificationsnodes'] = $certifications_node_ids;

}

function find_data_in_array($arr, $val){
    foreach ($arr as $value) {
      if ($value['nid'] == $val) {
          return $value['nid'];
      }
    }
}

/**
 * Implements template_preprocess_image() to remove WIDTH and HEIGHT from img-tag
 *
 * Adds body classes if certain regions have content.
 */

function athena_preprocess_image(&$variables) {
  if (isset($variables['attributes']['width']) && isset($variables['attributes']['height'])) {
    unset($variables['attributes']['width']);
    unset($variables['attributes']['height']);
  }
  // Page banner image style.
  if ($variables['style_name'] == 'page_banner_style') {
    // Set class.
    $variables['attributes']['class'][] = 'col-lg-12 col-md-12 d-none d-lg-block d-md-block p-0';
  }

  // Insights Page banner image style.
  if ($variables['style_name'] == 'insights_page_banner_image_style') {
    // Set class.
    $variables['attributes']['class'][] = 'img-fluid';
  }

  // Mobile banner image style.
  if ($variables['style_name'] == 'mobile_banner_style') {
    // Set class.
    $variables['attributes']['class'][] = 'col-lg-12 col-md-12 d-sm-block d-lg-none d-md-none p-0';
  }
}




function athena_preprocess_page(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();

  if (strpos($current_path, '/node') !== false) {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface) {
      $node_type = $node->getType();

      if ($node_type == 'affiliate_page') {
        $current_page_node_id = $node->id();
        $bundle='course';
        $query = \Drupal::entityQuery('node');
        $query->condition('status', 1);
        $query->condition('type', $bundle);
        $entity_ids = $query->execute();

        if(!empty($entity_ids)) {
          foreach ($entity_ids as $value) {
              $node = Node::load($value);
              if(is_object( $node->field_affiliate_page_reference)) {
                $affiliate_pages = $node->field_affiliate_page_reference;
                $tagged_node_ids = [];
                foreach($affiliate_pages as $attached_node) {
                  $tagged_node_ids[] = $attached_node->target_id;
                }
                if (in_array($current_page_node_id, $tagged_node_ids)) {
                  if(is_object( $node->field_affiliate_page_fields)){
                    $affiliate_fields = $node->field_affiliate_page_fields->referencedEntities();
                    $moduleid = "";
                    $assessment = "";
                    $instalmenttype = "";
                    $instalmentvalue = "";
                    $coursedelivery = "";
                    $courselrnsuprt = "";
                    $flipback = "";
                    $university_logo = "";
                    $university_white_logo  = '';
                    foreach($affiliate_fields as $fields){
                      $moduleid =  $fields->get('field_module_id')->value;
                      $assessment =  $fields->get('field_course_assessment')->value;
                      $instalmenttype =  $fields->get('field_instalment_type')->value;
                      $instalmentvalue =  $fields->get('field_instalment_value')->value;
                      $coursedelivery =  $fields->get('field_course_delivery')->value;
                      $courselrnsuprt =  $fields->get('field_course_lrnsuprt')->value;
                      $flipback =  $fields->get('field_flip_card_back_text')->value;
                    }
                  }

                  if(is_object( $node->field_link_universities)){
                    $universites = $node->field_link_universities->referencedEntities();
                    if(is_array($universites) && count($universites) > 0) {
                      $university = $universites[0];
                      $old_univ_ref = "";
                      $university_ref = "";
                      try {
                        $university_ref =  $university->get('field_university_ref')->target_id;
                        $old_univ_ref = $university->get('field_university')->value;
                      }
                      catch(Exception $e) {
                        // do nothing
                      }
                      if(!empty($old_univ_ref) && empty($university_ref)) {
                        $university_ref = $old_univ_ref;
                      }
                      $university_logo = getUniversityLogo($university_ref);
                      $university_white_logo  = getUniversityWhiteLogo($university_ref);
                    }
                  }

                  $node->assessment = "";
                  $node->moduleid = "";
                  $node->instalmenttype = "";
                  $node->instalmentvalue = "";
                  $node->coursedelivery = "";
                  $node->courselrnsuprt = "";
                  $node->flipback = "";
                  $node->university_logo = "";
                  $node->white_university_logo = "";

                  $node->assessment = $assessment;
                  $node->moduleid = $moduleid;
                  $node->instalmenttype = $instalmenttype;
                  $node->instalmentvalue = $instalmentvalue;
                  $node->coursedelivery = $coursedelivery;
                  $node->courselrnsuprt = $courselrnsuprt;
                  $node->flipback = $flipback;
                  $node->university_logo = $university_logo;
                  $node->university_white_logo = $university_white_logo;

                  $nodes[] = $node;

                }
              }
          }
          $variables['courses_data'] = $nodes;
          $variables['show_all'] = $_REQUEST['show_all'];
          $variables['athena_exclude'] = TRUE;
        }
      }
    }
  }

  if (strpos($current_path, '/course') !== false) {
    $variables['athena_exclude'] = TRUE;
  }

  if (strpos($current_path, '/shortterm-courses') !== false) {
    $variables['athena_exclude'] = TRUE;
  }

  if (strpos($current_path, '/university') !== false) {
    $variables['athena_exclude'] = TRUE;
  }
    if (strpos($current_path, '/search-results') !== false) {
    $variables['athena_exclude'] = TRUE;
  }

  
  if (strpos($current_path, '/webform/contact_us') !== false) {
    $variables['athena_exclude'] = TRUE;
    $variables['exclude_footer'] = TRUE;
    $variables['include_static_links'] = TRUE;    
  }

  if (strpos($current_path, '/webform/contact_us/confirmation') !== false) {
      $variables['athena_exclude'] = TRUE;
      $variables['exclude_footer'] = TRUE;
      $variables['include_static_links'] = TRUE;
    }

  $err_alias = \Drupal::service('path.alias_manager')->getPathByAlias('/Error');
    if (strpos($current_path, $err_alias) !== false) {
      $variables['athena_exclude'] = TRUE;
      $variables['exclude_footer'] = TRUE;
      $variables['include_static_links'] = TRUE;
    }


  if (strpos($current_path, '/smo') !== false) {
    $variables['athena_exclude'] = TRUE;
    $variables['exclude_footer'] = TRUE;
  }
   if (strpos($current_path, '/smo-tq') !== false) {
    $variables['athena_exclude'] = TRUE;
    $variables['exclude_footer'] = TRUE;
  }

  $bid = 17;
    $block_content = BlockContent::load($bid);

if(!empty($block_content)){
    $rendered_block = \Drupal::entityTypeManager()
      ->getViewBuilder('block_content')
      ->view($block_content);
}

 $variables['footercoursemenu'] = $rendered_block;

     if (strpos($current_path, '/registration') !== false) {
    $variables['athena_exclude'] = TRUE;
  }


  if (strpos($current_path, '/academic-program') !== false) {
    $variables['athena_exclude'] = TRUE;
  }

  if (strpos($current_path, '/certifications') !== false) {
    $variables['athena_exclude'] = TRUE;
  }

  if (strpos($current_path, '/micro-credits') !== false) {
    $variables['athena_exclude'] = TRUE;
  }

$current_uri = \Drupal::request()->getRequestUri();

   if (strpos($current_uri, 'about-us/governance-structure') !== false) {

 $variables['enable_popup'] = TRUE;

  }

}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function athena_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }


}




function athena_preprocess_node(&$variables) {
      $current_path = \Drupal::service('path.current')->getPath();


$current_uri = \Drupal::request()->getRequestUri();

     if ($variables['node']->getType() === 'about_us_pages') {
      if (strpos($current_uri, 'about-us/governance-structure') !== false) {



$alias = \Drupal::service('path.alias_manager')->getPathByAlias('/about-board-of-governance');
$params = Url::fromUri("internal:" . $alias)->getRouteParameters();
$entity_type = key($params);
$node = \Drupal::entityTypeManager()->getStorage($entity_type)->load($params[$entity_type]);

//print_r($node);exit;

$paragraph_data = $node->field_about_us_profile->referencedEntities();

$profile = array();
$i=0;
foreach($paragraph_data as $profile_data) {

    $designation = $profile_data->get('field_designation')->value;
    $name = $profile_data->get('field_profile_name')->value;
    $field_profile_desc = $profile_data->get('field_profile_desc')->value;
    $popup_image = $profile_data->get('field_popup_image')->entity->getFileUri();
    $profile_image = $profile_data->get('field_abiut_us_profile_img')->entity->getFileUri();
    $p_image_path = file_create_url($popup_image);
    $p_image = file_url_transform_relative($p_image_path);
    $prof_image_path = file_create_url($profile_image);
    $prof_image = file_url_transform_relative($prof_image_path);

    $profile[] =  array(
     'designation' =>$designation,
     'name' =>$name,
     'desc' =>$field_profile_desc,
     'prof_image' =>$prof_image,
     'p_image' =>$p_image,
     'unique_id' => "popup_about_".$i,
    );


    $i++;

}


 $variables['about_profile'] = $profile;
 $variables['enable_popup'] = TRUE;

  }else {
$variables['enable_popup'] = FALSE;
}
 }
}

function athena_preprocess_views_view_field(&$variables) { 

  $view = $variables['view'];

  if($view->id() == 'insights_all_search' || $view->id() == 'insights_blogs_search' || $view->id() == 'insights_news_search' || $view->id() == 'insights_press_release_search' || $view->id() == 'insights_interview_search_view' || $view->id() == 'insights_book_review_search' ) {    
    if($variables['field']->field == 'nid') {      
      $my_field_value = $variables['field']->getValue($variables['row']);
      $entity_a = Node::load($my_field_value);      
      $variables['read_time']  = get_read_time($entity_a);

        $my_altered_value = $entity_a->getTitle();
        $variables['my_title'] = str_replace( array( '\'', '"', ',' , ';', '<', '>', '&' ), ' ', $my_altered_value);

    }    
         
  }
   
    if($view->id() == 'insights_all') {   
     if($variables['field']->field == 'read_time') {
        $entity = $variables['row']->_entity;
        $my_altered_value = $entity->getTitle();
        $variables['my_title'] = str_replace( array( '\'', '"', ',' , ';', '<', '>', '&' ), ' ', $my_altered_value);


        //$variables['my_title'] = $my_altered_value;        
     }     
  }   
    
  if($view->id() == 'insight_interview_view') {
     if($variables['field']->field == 'field_interview_min_read') {
        $entity = $variables['row']->_entity;
        $my_altered_value = $entity->getTitle();
        //$variables['my_title'] = $my_altered_value;
        $variables['my_title'] = str_replace( array( '\'', '"', ',' , ';', '<', '>', '&' ), ' ', $my_altered_value);

     }  
     
     if($variables['field']->field == 'read_time') {
      $entity = $variables['row']->_entity;
      $my_altered_value = $entity->getTitle();
      //$variables['my_title'] = $my_altered_value;
      $variables['my_title'] = str_replace( array( '\'', '"', ',' , ';', '<', '>', '&' ), ' ', $my_altered_value);

   }     
  }   
    
  if($view->id() == 'insights_book_review' || $view->id() == 'insights_press_release' || 
    $view->id() == 'insight_news' || $view->id() == 'insight_blogs' ) {
     if($variables['field']->field == 'field_insight_article_min_read') {
        $entity = $variables['row']->_entity;
        $my_altered_value = $entity->getTitle();

        //$variables['my_title'] = $my_altered_value;
        $variables['my_title'] = str_replace( array( '\'', '"', ',' , ';', '<', '>', '&' ), ' ', $my_altered_value);

     }  
     
     if($variables['field']->field == 'read_time') {
      $entity = $variables['row']->_entity;
      $my_altered_value = $entity->getTitle();
      //$variables['my_title'] = $my_altered_value;
      $variables['my_title'] = str_replace( array( '\'', '"', ',' , ';', '<', '>', '&' ), ' ', $my_altered_value);

   } 
  }
  
}

function athena_form_alter(&$form, $form_state, $form_id) {

  if($form_id == 'comment_in_comm_form') {    
    
    $form['actions']['submit']['#value'] =t('Post Comments');
  }
}











