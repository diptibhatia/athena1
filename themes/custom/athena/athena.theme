<?php
use \Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph; 
use Drupal\Component\Serialization\Json;

/**
 * @file
 * Functions to support theming in the Athena theme.
 */
 
function athena_preprocess_block(array &$variables) { 
  
  $bundle='course';
     $query = \Drupal::entityQuery('node');
    $query->condition('status', 1);
  //  $query->condition('field_course_academic_route', 'academic', 'CONTAINS');
$query->condition('field_course_category', 'Academic');
    $query->condition('type', $bundle);
    $academic = $query->execute();
    
    
     $microquery = \Drupal::entityQuery('node');
    $microquery->condition('status', 1);
    $microquery->condition('field_course_category',  'Micro Credits', '=');
    $microquery->condition('type', $bundle);
     $micro = $microquery->execute();
    
    
     $querycertification = \Drupal::entityQuery('node');
    $querycertification->condition('status', 1);
    $querycertification->condition('field_course_category', 'Certifications', '=');
    $querycertification->condition('type', $bundle);
     $certifications = $querycertification->execute();
     $academic = node_load_multiple($academic);
     $academic_node_ids = array();
      foreach($academic as $node_key => $node) {
           $paragraph_univ_data = $node->field_link_universities->referencedEntities();

$univ_logo = array();
foreach($paragraph_univ_data as $explore_data) {
 $university_nid = $explore_data->get('field_university')->value;
 
 $univ_node = Node::load($university_nid);
       $univ_logo[] = array(
       'label' => $univ_node->label(),
       'logo'=> file_create_url($univ_node->get('field_logo')->entity->uri->value)
       );
          
}
       $academic_node_ids[] =  
       array(
       "nid"=>$node->id(),
       "title"=>$node->label(),
       'universities' => $univ_logo,
       
       );
      }
      

    $variables['academicnodes'] = $academic_node_ids;
    
    $micro = node_load_multiple($micro);
     $academic_node_ids = array();
      foreach($micro as $node_key => $node) {
           $paragraph_univ_data = $node->field_link_universities->referencedEntities();

$univ_logo = array();
foreach($paragraph_univ_data as $explore_data) {
 $university_nid = $explore_data->get('field_university')->value;
 
 $univ_node = Node::load($university_nid);
       $univ_logo[] = array(
       'label' => $univ_node->label(),
       'logo'=> file_create_url($univ_node->get('field_logo')->entity->uri->value)
       );
          
}
       $micro_node_ids[] =  
       array(
       "nid"=>$node->id(),
       "title"=>$node->label(),
       'universities' => $univ_logo,
       
       );
      }
      
    $variables['micronodes'] = $micro_node_ids;
    
    
     $certifications = node_load_multiple($certifications);
     $certifications_node_ids = array();
      foreach($certifications as $node_key => $node) {
           $paragraph_univ_data = $node->field_link_universities->referencedEntities();

$univ_logo = array();
foreach($paragraph_univ_data as $explore_data) {
 $university_nid = $explore_data->get('field_university')->value;
 
 $univ_node = Node::load($university_nid);
 $label_univ = '';
 if(is_object( $univ_node)){
	$label_univ = $univ_node->label();
    }
       $univ_logo[] = array(
       'label' => $label_univ,
       'logo'=> file_create_url($univ_node->get('field_logo')->entity->uri->value)
       );
          
}
       $certifications_node_ids[] =  
       array(
       "nid"=>$node->id(),
       "title"=>$node->label(),
       'universities' => $univ_logo,
       
       );
      }
      
    $variables['certificationsnodes'] = $certifications_node_ids;
   
  
  
}
 

/**
 * Implements template_preprocess_image() to remove WIDTH and HEIGHT from img-tag
 *
 * Adds body classes if certain regions have content.
 */
 
function athena_preprocess_image(&$variables) {
  if (isset($variables['attributes']['width']) && isset($variables['attributes']['height'])) {
    unset($variables['attributes']['width']);
    unset($variables['attributes']['height']);
  }
  // Page banner image style.
  if ($variables['style_name'] == 'page_banner_style') {
    // Set class.
    $variables['attributes']['class'][] = 'col-lg-12 col-md-12 d-none d-lg-block d-md-block p-0';
  }

  // Insights Page banner image style.
  if ($variables['style_name'] == 'insights_page_banner_image_style') {
    // Set class.
    $variables['attributes']['class'][] = 'img-fluid';
  }

  // Mobile banner image style.
  if ($variables['style_name'] == 'mobile_banner_style') {
    // Set class.
    $variables['attributes']['class'][] = 'col-lg-12 col-md-12 d-sm-block d-lg-none d-md-none p-0';
  }
}




function athena_preprocess_page(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  if (strpos($current_path, '/course') !== false) {
    $variables['athena_exclude'] = TRUE;
  }
  if (strpos($current_path, '/university') !== false) {
    $variables['athena_exclude'] = TRUE;
  }
    if (strpos($current_path, '/search-results') !== false) {
    $variables['athena_exclude'] = TRUE;
  }
  
  if (strpos($current_path, '/smo') !== false) {
    $variables['athena_exclude'] = TRUE;
  }
  
     if (strpos($current_path, '/registration') !== false) {
    $variables['athena_exclude'] = TRUE;
  }
  
  
  if (strpos($current_path, '/academic-program') !== false) {
    $variables['athena_exclude'] = TRUE;
  }
  
  if (strpos($current_path, '/certifications') !== false) {
    $variables['athena_exclude'] = TRUE;
  }
  
  if (strpos($current_path, '/micro-credits') !== false) {
    $variables['athena_exclude'] = TRUE;
  }
  
$current_uri = \Drupal::request()->getRequestUri();

   if (strpos($current_uri, 'about-us/governance-structure') !== false) {
    
 $variables['enable_popup'] = TRUE;

  }
 
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function athena_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }
}




function athena_preprocess_node(&$variables) {
      $current_path = \Drupal::service('path.current')->getPath();
$current_uri = \Drupal::request()->getRequestUri();

     if ($variables['node']->getType() === 'about_us_pages') {
      if (strpos($current_uri, 'about-us/governance-structure') !== false) {



$alias = \Drupal::service('path.alias_manager')->getPathByAlias('/about-board-of-governance');
$params = Url::fromUri("internal:" . $alias)->getRouteParameters();
$entity_type = key($params);
$node = \Drupal::entityTypeManager()->getStorage($entity_type)->load($params[$entity_type]);

//print_r($node);exit;

$paragraph_data = $node->field_about_us_profile->referencedEntities();

$profile = array();
$i=0;
foreach($paragraph_data as $profile_data) {
    
    $designation = $profile_data->get('field_designation')->value;
    $name = $profile_data->get('field_profile_name')->value;
    $field_profile_desc = $profile_data->get('field_profile_desc')->value;
    $popup_image = $profile_data->get('field_popup_image')->entity->getFileUri();
    $profile_image = $profile_data->get('field_abiut_us_profile_img')->entity->getFileUri();
    $p_image = file_create_url($popup_image);
    $prof_image = file_create_url($profile_image);
    


$profile[] =  array(
 'designation' =>$designation,
 'name' =>$name,
 'desc' =>$field_profile_desc,
 'prof_image' =>$prof_image,
 'p_image' =>$p_image,
 'unique_id' => "popup_about_".$i,
);


$i++;
    
}


 $variables['about_profile'] = $profile;
 $variables['enable_popup'] = TRUE;
 
  }else {
$variables['enable_popup'] = FALSE;
}
 }
}

