<?php
use \Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Component\Serialization\Json;
use Drupal\block_content\Entity\BlockContent;
use \Drupal\athena_library\Utils\CommonHelper;

/**
 * @file
 * Functions to support theming in the Athena theme.
 */

function athena_preprocess_block(array &$variables) {
    \Drupal::service('cache.render')->invalidateAll();
    $universityContentType = 'universities';
    $universityQuery = \Drupal::entityQuery('node');
    $universityQuery->condition('status', 1);
    $universityQuery->condition('type', $universityContentType);
    $universityData = $universityQuery->execute();
    $bundle='course';
    $academic = get_course_nav_items('Academic');
    $certifications = get_course_nav_items('Certifications');

    foreach($universityData as $univNid) {
      $univNodeData = Node::load($univNid);
      $logoPath = file_create_url($univNodeData->get('field_logo')->entity->uri->value);
      $logoRelativepath = file_url_transform_relative($logoPath);
      $univDataArr[$univNid] = array(
       'nid' => $univNid,
       'univkey' => $univNodeData->get('field_university_key')->value,
       'label' => $univNodeData->label(),
       'logo'=> $logoRelativepath
      );
    }
    $variables['all_universities'] = $univDataArr;

    $microquery = \Drupal::entityQuery('node');
    $microquery->condition('status', 1);
    $microquery->condition('field_course_category',  'Micro Credits', '=');
    $microquery->condition('type', $bundle);
    $micro = $microquery->execute();

    $academic = node_load_multiple($academic);
    $academic_node_ids = array();
    foreach($academic as $node_key => $node) {
      $paragraph_univ_data = $node->field_link_universities->referencedEntities();
      $univ_logo = array();
      foreach($paragraph_univ_data as $explore_data) {
        $university_nid = $explore_data->get('field_university')->value;
        $find_univ_id = find_data_in_array($univ_logo, $university_nid);
        if (!empty($university_nid) && empty($find_univ_id)) {
          $univ_node = Node::load($university_nid);
          $univkey = $univ_node->get('field_university_key')->value;
          $logoPath = file_create_url($univ_node->get('field_logo')->entity->uri->value);
          $logoRelativepath = file_url_transform_relative($logoPath);
          $univ_logo[] = array(
           'label' => $univ_node->label(),
           'logo'=> $logoRelativepath,
           'nid' => $university_nid,
           'univkey' => $univkey
          );
        }


        $academicUnivArr[] = $university_nid;
      }
      $academic_node_ids[] =
        array(
          "nid"=>$node->id(),
          "title"=>$node->label(),
          'universities' => $univ_logo,
        );
    }


    $academicUnivIdsFilter = array_filter($academicUnivArr);
    $academicUnivIds = array_unique($academicUnivIdsFilter);
    if (count($academicUnivIds) > 0) {
      foreach ($academicUnivIds as $key => $value) {
        $academicUniversities[] = $univDataArr[$value];
      }
    }
    $variables['academic_universities'] = $academicUniversities;


    $variables['academicnodes'] = $academic_node_ids;

    $micro = node_load_multiple($micro);
    $academic_node_ids = array();
    foreach($micro as $node_key => $node) {
      $paragraph_univ_data = $node->field_link_universities->referencedEntities();

      $univ_logo = array();
      foreach($paragraph_univ_data as $explore_data) {
        $university_nid = $explore_data->get('field_university')->value;
        $find_univ_id = find_data_in_array($univ_logo, $university_nid);
        if (!empty($university_nid) && empty($find_univ_id)) {
          $univ_node = Node::load($university_nid);
          $univkey = $univ_node->get('field_university_key')->value;

          $logoPath = file_create_url($univ_node->get('field_logo')->entity->uri->value);
          $logoRelativepath = file_url_transform_relative($logoPath);

          $univ_logo[] = array(
            'label' => $univ_node->label(),
            'logo'=> $logoRelativepath,
            'nid' => $university_nid,
            'univkey' => $univkey
          );
        }
        $mcUnivArr[] = $university_nid;
      }
      $micro_node_ids[] =
      array(
        "nid"=>$node->id(),
        "title"=>$node->label(),
        'universities' => $univ_logo,
      );
    }

    $mcUnivIdsFilter = array_filter($mcUnivArr);
    $mcUnivIds = array_unique($mcUnivIdsFilter);
    if (count($mcUnivIds) > 0) {
      foreach ($mcUnivIds as $key => $value) {
        $mcUniversities[] = $univDataArr[$value];
      }
    }
    $variables['mc_universities'] = $mcUniversities;

    $variables['micronodes'] = $micro_node_ids;


    $certifications = node_load_multiple($certifications);
    $certifications_node_ids = array();
    foreach($certifications as $node_key => $node) {
      $paragraph_univ_data = $node->field_link_universities->referencedEntities();
      $univ_logo = array();
      foreach($paragraph_univ_data as $explore_data) {
        $university_nid = $explore_data->get('field_university')->value;

        $univ_node = Node::load($university_nid);
        $label_univ = '';
        $find_univ_id = find_data_in_array($univ_logo, $university_nid);
        if (!empty($university_nid) && is_object($univ_node) && empty($find_univ_id)) {
          $label_univ = $univ_node->label();
          $univkey = $univ_node->get('field_university_key')->value;
          $logoPath = file_create_url($univ_node->get('field_logo')->entity->uri->value);
          $logoRelativepath = file_url_transform_relative($logoPath);
          $univ_logo[] = array(
            'label' => $label_univ,
            'logo'=> $logoRelativepath,
            'nid' => $university_nid,
            'univkey' => $univkey
          );
        }
        $certificateUnivArr[] = $university_nid;
      }
      $certifications_node_ids[] =
      array(
        "nid"=>$node->id(),
        "title"=>$node->label(),
        'universities' => $univ_logo,
      );
    }

    $certificateUnivIdsFilter = array_filter($certificateUnivArr);
    $certificateUnivIds = array_unique($certificateUnivIdsFilter);
    if (count($certificateUnivIds) > 0) {
      foreach ($certificateUnivIds as $key => $value) {
        $certificateUniversities[] = $univDataArr[$value];
      }
    }
    $variables['certifications_universities'] = $certificateUniversities;

    // print "<pre>";
    // print_r($academicUniversities);
    // print_r($mcUniversities);
    // print_r($certificateUniversities);
    // exit;

    $variables['certificationsnodes'] = $certifications_node_ids;

    $bundle='course';
    $query = \Drupal::entityQuery('node');
    $query->condition('status', 1);
    $query->condition('type', $bundle);
    $entity_ids = $query->execute();

    $node = array();

    if(!empty($entity_ids)) {
      $nodes = node_load_multiple($entity_ids);
      }

    $variables['courses_data'] = $nodes;


//------------------working code start here-------------


// load first level array 

$term_data_first_level = get_first_level_array_main_menu();
$variables['term_data_first_level'] = $term_data_first_level;

//-------------------------------------
// load second level array for each level

$term_data_second_level = get_second_level_array_main_menu($term_data_first_level);
$variables['term_data_second_level'] = $term_data_second_level;

//------------------
// load courses array for main menu
$get_courses_array_main_menu = get_courses_array_main_menu($term_data_second_level);
$variables['academicnodes'] = $get_courses_array_main_menu;

//----------------popular courses for a level -----

$term_popular_academic = get_popular_courses_main_menu('Academic');
$variables['term_popular_academic'] = $term_popular_academic;

//-----------------------------------------------

$term_popular_certification = get_popular_courses_main_menu('Certifications');
$variables['term_popular_certification'] = $term_popular_certification;
        


//----------------

// load first level array for short courses 
try {
      $lms_url = CommonHelper::getConfigSettings('athena_library.common_settings', 'lms_url');
      if ($lms_url == "https://newlms.athena.edu") {
          $api = "/athenadev";
      } elseif ($lms_url == "https://learnstaging.athena.edu") {
          $api = "/athenastg";
      } else {
          $api = "/athenaprod";
      }

      $certificates_uri = $lms_url . $api . "/api/get_master_table_data?table=certification_type";
      $response_certificates = \Drupal::httpClient()->get($certificates_uri, array('headers' => array('Accept' => 'application/json')));
      $certificate_filters = (string)$response_certificates->getBody();
      $certificates = json_decode($certificate_filters, TRUE);

      //print_r($certificates); exit;
      foreach ($certificates as $key => $value) 
      {
          if ( $value['certificate_type_name'] == "Basics" )
            {
              $ele_id = "basicfuncfaicon";
              $func = "basicfunc()";
              $ele_id1 = "basiccat";
              $class = "row-basics";
            }         

            if ( $value['certificate_type_name'] == "Essentials" ) 
            {
              $ele_id = "essenfuncfaicon";
              $func = "essenfunc()";
              $ele_id1 = "essentialscat";
              $class = "row-essentials";
            }

            if ( $value['certificate_type_name'] == "Mastering" ) 
            {
              $ele_id = "mastfuncfaicon";
              $func = "mastfunc()"; 
              $ele_id1 = "mastcat";
              $class = "row-mast";  
            }
              
            if ( $value['certificate_type_name'] == "Diploma" ) 
            {
              $ele_id = "dipfuncfaicon";
              $func = "dipfunc()";  
              $ele_id1 = "displomacat";
              $class = "row-diploma"; 
            }
            
            if ( $value['certificate_type_name'] == "Executive Diploma" ) 
            {
              $ele_id = "exediplfuncfaicon";
              $func = "exediplfunc()";
              $ele_id1 = "exediplcat";
              $class = "row-exedipl";   
            }

            if ( $value['certificate_type_name'] == "MBA Essentials" ) 
            {
              $ele_id = "mbaessenfuncfaicon";
              $func = "mbaessenfunc()";
              $ele_id1 = "mbaessentialscat";
              $class = "row-mbaessentials";   
            }


            if ( $value['certificate_type_name'] != "MBA Essentials with Specialization" )
            {            
              $certification_list[] =
                array(
                  "cert_id" => $value['id'],
                  "cert_name" => $value['certificate_type_name'],
                  "ele_id" => $ele_id,
                  "func"  => $func,
                  "ele_id1" => $ele_id1,
                  "class"  => $class,
                  
                );    
            }

      }

      $variables['certification_list'] = $certification_list;

      // load short term courses for each category
      foreach ($certification_list as $key => $value) 
      {
        $uri = $lms_url . $api . "/api/courselist?page=1&page_limit=50&fk_type_of_qualification_id=1&status=1&fk_certificate_type_id=".$value['cert_id'];
        $response = \Drupal::httpClient()->get($uri, array('headers' => array('Accept' => 'application/json')));
        $data = (string)$response->getBody();
        $nodes = json_decode($data)->data->data;
        if (count($nodes) > 0) {
          foreach ($nodes as $key => $value1) 
          {
            $courses_data[] = [
              'cid' => $value1->cid,
              'course_url' => $lms_url . '/student-dashboard/course/' . $value1->cid.'/'.$value1->slug,
                'label' => $value1->course_name,
                'category' => $value['cert_id']
            ];
          }
      }//load short term courses for each category
    
    }

    $variables['shortsourses_list'] = $courses_data;

  } catch (Exception $e) {
    print "Empty list";
  }

}

function find_data_in_array($arr, $val){
    foreach ($arr as $value) {
      if ($value['nid'] == $val) {
          return $value['nid'];
      }
    }
}

/**
 * Implements template_preprocess_image() to remove WIDTH and HEIGHT from img-tag
 *
 * Adds body classes if certain regions have content.
 */

function athena_preprocess_image(&$variables) {
  if (isset($variables['attributes']['width']) && isset($variables['attributes']['height'])) {
    unset($variables['attributes']['width']);
    unset($variables['attributes']['height']);
  }
  // Page banner image style.
  if ($variables['style_name'] == 'page_banner_style') {
    // Set class.
    $variables['attributes']['class'][] = 'col-lg-12 col-md-12 d-none d-lg-block d-md-block p-0';
  }

  // Insights Page banner image style.
  if ($variables['style_name'] == 'insights_page_banner_image_style') {
    // Set class.
    $variables['attributes']['class'][] = 'img-fluid';
  }

  // Mobile banner image style.
  if ($variables['style_name'] == 'mobile_banner_style') {
    // Set class.
    $variables['attributes']['class'][] = 'col-lg-12 col-md-12 d-sm-block d-lg-none d-md-none p-0';
  }
}

function getShortCourse($node) {
    try {
        $lms_url = CommonHelper::getConfigSettings('athena_library.common_settings', 'lms_url');
        if ($lms_url == "https://newlms.athena.edu") {
            $api = "/athenadev";
        } elseif ($lms_url == "https://learnstaging.athena.edu") {
            $api = "/athenastg";
        } else {
            $api = "/athenaprod";
        }
        $course_name = $node->getTitle();
        $uri = $lms_url . $api . "/api/courselist?page=1&page_limit=1&fk_type_of_qualification_id=1&status=1&course_name=".trim($course_name);
        $response = \Drupal::httpClient()->get($uri, array('headers' => array('Accept' => 'application/json')));
        $data = (string)$response->getBody();
        $nodes = json_decode($data)->data->data;
        return $nodes;
    } catch (Exception $e) {
      return [];
    }
}

function getRelatedShortCourses() {
  try {
    $lms_url = CommonHelper::getConfigSettings('athena_library.common_settings', 'lms_url');
    if ($lms_url == "https://newlms.athena.edu") {
        $api = "/athenadev";
    } elseif ($lms_url == "https://learnstaging.athena.edu") {
        $api = "/athenastg";
    } else {
        $api = "/athenaprod";
    }
    $related_courses = $related_courses_data = [];
    $current_page = 1;
    $total = 0;
    $limit = 10;
    $uri = $lms_url . $api . "/api/get_master_table_data?table=subject_area";
    $course_ids = [];
    $course_subjects = json_decode(\Drupal::httpClient()->get($uri, array('headers' => array('Accept' => 'application/json')))->getBody()->getContents());
    foreach ($course_subjects as $course_subject) {
      $course_ids[] = $course_subject->id;
    }
    // $random_subject_id = array_rand($course_ids);
    $random_subject_id = 6;
    $uri = $lms_url . $api . "/api/courselist?page=1&page_limit=10&fk_type_of_qualification_id=1&status=1&subject_area_id=".$random_subject_id;
    $response = \Drupal::httpClient()->get($uri, array('headers' => array('Accept' => 'application/json')))->getBody();
    $all_data = json_decode($response);
    if($all_data->status == 200) {
      $related_courses = $all_data->data->data;
      $total = $all_data->data->total;
      $current_page = $all_data->data->current_page;
    }
    $pages = ceil($total / $limit);
    $related_courses_data["lms_url"] = $lms_url;
    $related_courses_data["related_courses"] = $related_courses;
    $related_courses_data["total"] = $total;
    $related_courses_data["current_page"] = $current_page;
    $related_courses_data["subject_id"] = $random_subject_id;
    return $related_courses_data;
  } catch (Exception $e) {
    return [];
  }
}

function athena_preprocess_page(&$variables) {

  $variables['error_page'] = (int) filter_var(\Drupal::config('system.site')->get('page')['403'], FILTER_SANITIZE_NUMBER_INT);
  $current_path = \Drupal::service('path.current')->getPath();

  if (strpos($current_path, '/node') !== false) {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface) {
      $node_type = $node->getType();

      if ($node_type == 'short_course') {
        \Drupal::service('page_cache_kill_switch')->trigger();
        $course_data = getShortCourse($node);
        $related_course_data = getRelatedShortCourses();
        if(!empty($course_data)) {
          $variables['course_info'] = $course_data[0];
        }
        if(!empty($related_course_data)){
          $variables['related_courses_data'] = $related_course_data;
        }
      }

      if ($node_type == 'affiliate_page') {
        $current_page_node_id = $node->id();
        $bundle='course';
        $query = \Drupal::entityQuery('node');
        $query->condition('status', 1);
        $query->condition('type', $bundle);
        $entity_ids = $query->execute();

        if(!empty($entity_ids)) {
          foreach ($entity_ids as $value) {
              $node = Node::load($value);
              if(is_object( $node->field_affiliate_page_reference)) {
                $affiliate_pages = $node->field_affiliate_page_reference;
                $tagged_node_ids = [];
                foreach($affiliate_pages as $attached_node) {
                  $tagged_node_ids[] = $attached_node->target_id;
                }
                if (in_array($current_page_node_id, $tagged_node_ids)) {
                  if(is_object( $node->field_affiliate_page_fields)){
                    $affiliate_fields = $node->field_affiliate_page_fields->referencedEntities();
                    $moduleid = "";
                    $assessment = "";
                    $instalmenttype = "";
                    $instalmentvalue = "";
                    $coursedelivery = "";
                    $courselrnsuprt = "";
                    $flipback = "";
                    $university_logo = "";
                    $university_white_logo  = '';
                    foreach($affiliate_fields as $fields){
                      $moduleid =  $fields->get('field_module_id')->value;
                      $assessment =  $fields->get('field_course_assessment')->value;
                      $instalmenttype =  $fields->get('field_instalment_type')->value;
                      $instalmentvalue =  $fields->get('field_instalment_value')->value;
                      $coursedelivery =  $fields->get('field_course_delivery')->value;
                      $courselrnsuprt =  $fields->get('field_course_lrnsuprt')->value;
                      $flipback =  $fields->get('field_flip_card_back_text')->value;
                    }
                  }

                  if(is_object( $node->field_link_universities)){
                    $universites = $node->field_link_universities->referencedEntities();
                    if(is_array($universites) && count($universites) > 0) {
                      $university = $universites[0];
                      $old_univ_ref = "";
                      $university_ref = "";
                      try {
                        $university_ref =  $university->get('field_university_ref')->target_id;
                        $old_univ_ref = $university->get('field_university')->value;
                      }
                      catch(Exception $e) {
                        // do nothing
                      }
                      if(!empty($old_univ_ref) && empty($university_ref)) {
                        $university_ref = $old_univ_ref;
                      }
                      $university_logo = getUniversityLogo($university_ref);
                      $university_white_logo  = getUniversityWhiteLogo($university_ref);
                    }
                  }

                  $node->assessment = "";
                  $node->moduleid = "";
                  $node->instalmenttype = "";
                  $node->instalmentvalue = "";
                  $node->coursedelivery = "";
                  $node->courselrnsuprt = "";
                  $node->flipback = "";
                  $node->university_logo = "";
                  $node->white_university_logo = "";

                  $node->assessment = $assessment;
                  $node->moduleid = $moduleid;
                  $node->instalmenttype = $instalmenttype;
                  $node->instalmentvalue = $instalmentvalue;
                  $node->coursedelivery = $coursedelivery;
                  $node->courselrnsuprt = $courselrnsuprt;
                  $node->flipback = $flipback;
                  $node->university_logo = $university_logo;
                  $node->university_white_logo = $university_white_logo;

                  $nodes[] = $node;

                }
              }
          }
          $variables['courses_data'] = $nodes;
          $variables['show_all'] = $_REQUEST['show_all'];
          $variables['athena_exclude'] = TRUE;
        }
      }
    }
  }

  if (strpos($current_path, '/course') !== false) {
    $variables['athena_exclude'] = TRUE;
  }

  if (strpos($current_path, '/shortterm-courses') !== false) {
    $variables['athena_exclude'] = TRUE;
    $variables['exclude_footer'] = TRUE;
    $variables['include_static_links'] = TRUE;
  }

  $cert_level = \Drupal::service('path.alias_manager')->getPathByAlias('/certification-level');
    if (strpos($current_path, $cert_level) !== false) {

    $variables['athena_exclude'] = TRUE;
    $variables['exclude_footer'] = TRUE;
    $variables['include_static_links'] = TRUE;
  }


  if (strpos($current_path, '/rsu-ucam') !== false) {
    $variables['athena_exclude'] = TRUE;
    $variables['exclude_footer'] = TRUE;
    $variables['include_static_links'] = TRUE;
    $line_app_id = CommonHelper::getConfigSettings('athena_library.common_settings', 'line_app_id');
    $variables['line_app_id'] = $line_app_id;
  }
  
  $faq_gloss = \Drupal::service('path.alias_manager')->getPathByAlias('/FAQ-Glossary');
  if (strpos($current_path, $faq_gloss ) !== false) {
      $variables['athena_exclude'] = TRUE;
    }
    

  if (strpos($current_path, '/university') !== false) {
    $variables['athena_exclude'] = TRUE;
  }
    if (strpos($current_path, '/search-results') !== false) {
    $variables['athena_exclude'] = TRUE;
  }


  if (strpos($current_path, '/webform/contact_us') !== false) {
    $variables['athena_exclude'] = TRUE;
    $variables['exclude_footer'] = TRUE;
    $variables['include_static_links'] = TRUE;
  }

  if (strpos($current_path, '/webform/contact_us/confirmation') !== false) {
      $variables['athena_exclude'] = TRUE;
      $variables['exclude_footer'] = TRUE;
      $variables['include_static_links'] = TRUE;
    }

  $err_alias = \Drupal::service('path.alias_manager')->getPathByAlias('/Error');
    if (strpos($current_path, $err_alias) !== false) {
      $variables['athena_exclude'] = TRUE;
      $variables['exclude_footer'] = TRUE;
      $variables['include_static_links'] = TRUE;
    }


  if (strpos($current_path, '/smo') !== false) {
    $variables['athena_exclude'] = TRUE;
    $variables['exclude_footer'] = TRUE;
  }
   if (strpos($current_path, '/smo-tq') !== false) {
    $variables['athena_exclude'] = TRUE;
    $variables['exclude_footer'] = TRUE;
  }

  $bid = 17;
    $block_content = BlockContent::load($bid);

if(!empty($block_content)){
    $rendered_block = \Drupal::entityTypeManager()
      ->getViewBuilder('block_content')
      ->view($block_content);
}

 $variables['footercoursemenu'] = $rendered_block;

     if (strpos($current_path, '/registration') !== false) {
    $variables['athena_exclude'] = TRUE;
  }


  if (strpos($current_path, '/academic-program') !== false) {
    $variables['athena_exclude'] = TRUE;
  }

  if (strpos($current_path, '/certifications') !== false) {
    $variables['athena_exclude'] = TRUE;
  }

  if (strpos($current_path, '/micro-credits') !== false) {
    $variables['athena_exclude'] = TRUE;
  }

  if (strpos($current_path, '/StudentEnroltoCourse') !== false) {
    $variables['athena_exclude'] = TRUE;
  }

$current_uri = \Drupal::request()->getRequestUri();

   if (strpos($current_uri, 'about-us/governance-structure') !== false) {

 $variables['enable_popup'] = TRUE;

  }
  if($current_path == "/webform/contact_us") {
    $variables['#attached']['library'][] = 'athena/intl-tel-input';
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function athena_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }
  if($path_alias == "/verify/certificate") {
    $suggestions[] = 'page__verify_certificate';
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function athena_page_attachments_alter(array &$attachments) {
  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);
  // We want to prevent the search engines from indexing this content
  if ($path_alias == "/verify/certificate") {
    // add the metatag
    $newtag = [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'robots',
        'content' => 'noindex, nofollow',
      ],
    ];
    $attachments['#attached']['html_head'][] = [$newtag, 'robots'];
  }
}


function athena_preprocess_node(&$variables) {

  $current_path = \Drupal::service('path.current')->getPath();
  $current_uri = \Drupal::request()->getRequestUri();

  $variables['leaders'] = '0';
  if ($variables['node']->getType() === 'about_us_pages') {
    if (strpos($current_uri, 'about-us/governance-structure') !== false) {
      $alias = \Drupal::service('path.alias_manager')->getPathByAlias('/about-board-of-governance');
      $params = Url::fromUri("internal:" . $alias)->getRouteParameters();
      $entity_type = key($params);
      $node = \Drupal::entityTypeManager()->getStorage($entity_type)->load($params[$entity_type]);

      $paragraph_data = $node->field_about_us_profile->referencedEntities();
      $profile = array();
      $i=0;
      foreach($paragraph_data as $profile_data) {
        $designation = $profile_data->get('field_designation')->value;
        $name = $profile_data->get('field_profile_name')->value;
        $field_profile_desc = $profile_data->get('field_profile_desc')->value;
        $popup_image = $profile_data->get('field_popup_image')->entity->getFileUri();
        $profile_image = $profile_data->get('field_abiut_us_profile_img')->entity->getFileUri();
        $p_image_path = file_create_url($popup_image);
        $p_image = file_url_transform_relative($p_image_path);
        $prof_image_path = file_create_url($profile_image);
        $prof_image = file_url_transform_relative($prof_image_path);

        $profile[] =  array(
         'designation' =>$designation,
         'name' =>$name,
         'desc' =>$field_profile_desc,
         'prof_image' =>$prof_image,
         'p_image' =>$p_image,
         'unique_id' => "popup_about_".$i,
        );
          $i++;
      }
      $variables['about_profile'] = $profile;
      $variables['enable_popup'] = TRUE;
    }

    // code added for restructuring of about us pages
    elseif ((strpos($current_uri, 'about-us/dean') !== false) || (strpos($current_uri, 'about-us/founder-and-ceo') !== false) || (strpos($current_uri, 'about-us/academic-director') !== false )) {

        $variables['enable_popup'] = FALSE;

        $variables['leaders'] = '1';
        $node = \Drupal::routeMatch()->getParameter('node');

        $heading = $node->get('field_heading')->value;
        $variables['heading'] = $heading;

        if ( $heading != "" )
        {
          $image =$node->get('field_image')->entity->getFileUri();
          $image =  file_create_url($image);
          $variables['image'] = $image;

        }


        $body = $node->get('body')->value;
        $variables['body'] = $body;


        $linkdn = $node->get('field_linked_in_link')->value;
        $variables['linkdn'] = $linkdn;


        // get bio - description of leaders

        $bundle='athena_people';
        $query = \Drupal::entityQuery('node');
        $query->condition('status', 1);

        if (strpos($current_uri, 'about-us/dean'))
            $query->condition('title', 'Dr. William Painter', 'CONTAINS');
        elseif (strpos($current_uri, 'about-us/founder-and-ceo'))
          $query->condition('title', 'Firoz Thairinil');
        elseif (strpos($current_uri, 'about-us/academic-director'))
          $query->condition('title', 'Col (Rtd). Anil Ahluwalia');


        $query->condition('type', $bundle);
        $entity_ids = $query->execute();


        foreach ($entity_ids as $value) {
                  $node = Node::load($value);
              }

        $description = $node->get('field_description')->value;
        $variables['description'] =  $description;
      }
    }
}

function athena_preprocess_views_view_field(&$variables) {

  $view = $variables['view'];

  if($view->id() == 'insights_all_search' || $view->id() == 'insights_blogs_search' || $view->id() == 'insights_news_search' || $view->id() == 'insights_press_release_search' || $view->id() == 'insights_interview_search_view' || $view->id() == 'insights_book_review_search' || $view->id() == 'most_viewed_popular_insights' ) {
    if($variables['field']->field == 'nid') {
      $my_field_value = $variables['field']->getValue($variables['row']);
      $entity_a = Node::load($my_field_value);
      $variables['read_time']  = get_read_time($entity_a);

        $my_altered_value = $entity_a->getTitle();
        $variables['my_title'] = str_replace( array( '\'', '"', ',' , ';', '<', '>', '&' ), ' ', $my_altered_value);

    }

  }

    if($view->id() == 'insights_all') {
     if($variables['field']->field == 'read_time') {
        $entity = $variables['row']->_entity;
        $my_altered_value = $entity->getTitle();
        $variables['my_title'] = str_replace( array( '\'', '"', ',' , ';', '<', '>', '&' ), ' ', $my_altered_value);


        //$variables['my_title'] = $my_altered_value;
     }
  }

  if($view->id() == 'insight_interview_view') {
     if($variables['field']->field == 'field_interview_min_read') {
        $entity = $variables['row']->_entity;
        $my_altered_value = $entity->getTitle();
        //$variables['my_title'] = $my_altered_value;
        $variables['my_title'] = str_replace( array( '\'', '"', ',' , ';', '<', '>', '&' ), ' ', $my_altered_value);

     }

     if($variables['field']->field == 'read_time') {
      $entity = $variables['row']->_entity;
      $my_altered_value = $entity->getTitle();
      //$variables['my_title'] = $my_altered_value;
      $variables['my_title'] = str_replace( array( '\'', '"', ',' , ';', '<', '>', '&' ), ' ', $my_altered_value);

   }
  }

  if($view->id() == 'insights_book_review' || $view->id() == 'insights_press_release' ||
    $view->id() == 'insight_news' || $view->id() == 'insight_blogs' ) {
     if($variables['field']->field == 'field_insight_article_min_read') {
        $entity = $variables['row']->_entity;
        $my_altered_value = $entity->getTitle();

        //$variables['my_title'] = $my_altered_value;
        $variables['my_title'] = str_replace( array( '\'', '"', ',' , ';', '<', '>', '&' ), ' ', $my_altered_value);

     }

     if($variables['field']->field == 'read_time') {
      $entity = $variables['row']->_entity;
      $my_altered_value = $entity->getTitle();
      //$variables['my_title'] = $my_altered_value;
      $variables['my_title'] = str_replace( array( '\'', '"', ',' , ';', '<', '>', '&' ), ' ', $my_altered_value);

   }
  }

}

function athena_form_alter(&$form, $form_state, $form_id) {

  if($form_id == 'comment_in_comm_form') {
    $form['actions']['submit']['#value'] =t('Post Comments');
  }
}

function athena_preprocess_field(&$variables) {

  if ($variables['element']['#entity_type'] === 'node') {
    $node = $variables['element']['#object'];
    $nid = $node->id();
    $variables['comment_nid'] = $nid;
    $stats = \Drupal::service('comment.statistics')->read(array_fill_keys([$nid], ''), 'node');
    if ($stats[0]->comment_count == "" ) $stats[0]->comment_count = 0;
    $variables['comment_count'] = $stats[0]->comment_count;
    if (!empty(\Drupal::hasService('nodeviewcount.records_manager'))) {
      $nodeviewcount = \Drupal::service('nodeviewcount.records_manager')->getNodeViewsCount($node,\Drupal\user\Entity\User::getAnonymousUser());
      if ($nodeviewcount) {
        $variables['node_stats'] = $nodeviewcount[0]->expression;
      }
    }
  }
}

function athena_preprocess_links(&$variables) {

  $current_path = \Drupal::service('path.current')->getPath();
  if (strpos($current_path, '/node') !== false) {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface) {
      $node_id = $node->id();
      $variables['curr_nid'] = $node_id;
      $title = $node->getTitle();
      $variables['my_title'] = str_replace( array( '\'', '"', ',' , ';', '<', '>', '&' ), ' ', $title);
    }
  }
}

function athena_preprocess_html(&$variables)
{
  $current_path = \Drupal::service('path.current')->getPath();
  
  /*
  $mbaprograms = \Drupal::service('path.alias_manager')->getPathByAlias('/MBAPrograms');
  $pgcertificateEnrol = \Drupal::service('path.alias_manager')->getPathByAlias('/pgcertificateEnrol');
 
  if ((strpos($current_path, $mbaprograms) !== false) || (strpos($current_path, $pgcertificateEnrol ) !== false) ) {
      $lead_source = $_REQUEST['ref'] ?? '';
      if ($lead_source == 'AF-LINKCONNECTOR-CS') {
        $variables['linkconnectscript'] = TRUE;
      } 
  }  

  if (strpos($current_path, '/StudentEnroltoCourse') !== false) {
    $referer = $_SERVER['HTTP_REFERER'];
    $lead_source = $_REQUEST['source'] ?? '';
    $lead_user = $_REQUEST['UId'] ?? '';
    $lead_cid = $_REQUEST['CId'] ?? '';
    $lead_mail = $_REQUEST['mail'] ?? '';

    if ((strpos($referer, 'MBAPrograms') !== false) || (strpos($referer, 'pgcertificateEnrol') !== false) ) {
      if ($lead_source == 'LINKCONNECTOR') {
        $variables['link_connector_pixel'] = TRUE;
        $variables['lead_user'] = $lead_user;
        $variables['lead_cid'] = $lead_cid;
        $variables['lead_mail'] = $lead_mail;
      }
    }
  }
  */

  $route_name = \Drupal::routeMatch()->getRouteName();
    // Custom meta tags on smo and course pages.
    if ($route_name == 'athena_course.course' || $route_name == 'athena_smo.smo') {
      $possible_parameters = \Drupal::routeMatch()->getParameters();
      $possible_parameters_obj = $possible_parameters->all();
      $nid = $possible_parameters_obj['nid'];
      $node = Node::load($nid);
      $course_category = $node->get('field_course_category')->value;

      if ($course_category == 'Academic') {
        $field1 = 'field_course_page_meta_tag';
        $field2 = 'field_course_page_meta_descripti';
        $field3 = 'field_course_page_meta_keywords';
      }
      if ($course_category == 'Certifications') {
        $field1 = 'field_smo_page_meta_tag_title';
        $field2 = 'field_smo_page_meta_tag_descript';
        $field3 = 'field_smo_page_meta_tag_keywords';
      }
      $meta_tag_value = $node->get($field1)->value;
      $meta_tag_desc = $node->get($field2)->value;
      $meta_tag_keywords = array();

      $variables['head_title'] = $meta_tag_value;

      foreach ($node->{$field3}->getValue() as $value) {
        if (!empty($value['value'])) {
          $meta_tag_keywords[] = $value['value'];
        }
      }
      if (count($meta_tag_keywords) > 0) {
        $meta_tag_keywords_list = implode(',', $meta_tag_keywords);
      }

            $title = [
                '#tag' => 'meta',
                '#attributes' => [
                    'property' => 'og:title',
                    'content' => $meta_tag_value,
                ],
            ];
            $description = [
                '#tag' => 'meta',
                '#attributes' => [
                    'name' => 'description',
                    'content' => $meta_tag_desc,
                ],
            ];


            $searchimage = "";          
            if(is_object( $node->get('field_search_list_image')->entity))
              $searchimage = $node->get('field_search_list_image')->entity->getFileUri();

            if (!empty($searchimage)) $image = file_create_url($searchimage);
          
            //$image = file_create_url($node->field_search_list_image->entity->getFileUri());

            $ogimage = [
                '#tag' => 'meta',
                '#attributes' => [
                    'property' => 'og:image',
                    'content' => $image,
                ],
            ];

          $twitter_card = [
            '#tag' => 'meta',
            '#attributes' => [
                'name' => 'twitter:card',
                'content' => 'summary_large_image',
            ],
          ];
          $twitter_title = [
              '#tag' => 'meta',
              '#attributes' => [
                  'name' => 'twitter:title',
                  'content' => $meta_tag_value,
              ],
          ];
          $twitter_desc = [
              '#tag' => 'meta',
              '#attributes' => [
                  'name' => 'twitter:description',
                  'content' => $meta_tag_desc,
              ],
          ];
          $twitter_image = [
              '#tag' => 'meta',
              '#attributes' => [
                  'name' => 'twitter:image',
                  'content' => $image,
              ],
          ];

            $variables['page']['#attached']['html_head'][] = [$title, 'title'];
            $variables['page']['#attached']['html_head'][] = [$description, 'description'];
            // $variables['page']['#attached']['html_head'][] = [$ogimage, 'image'];
            $variables['page']['#attached']['html_head'][] = [$twitter_card, 'twitter_card'];
            $variables['page']['#attached']['html_head'][] = [$twitter_title, 'twitter_title'];
            $variables['page']['#attached']['html_head'][] = [$twitter_desc, 'twitter_desc'];
            $variables['page']['#attached']['html_head'][] = [$twitter_image, 'twitter_image'];
    }



    // Insights discussion forum
    $page_params = \Drupal::request()->query->all();
    if(is_array($page_params) && !empty($page_params)) {
      if(isset($page_params['discussion_id']) && $page_params['discussion_id'] > 0) {
        $discussion_id = $page_params['discussion_id'];
        $end_url = 'https://learn.athena.edu/athenaprod/api/';
        $client_detal = \Drupal::service('http_client_factory')->fromOptions([
          'base_uri' => $end_url,
        ]);

        $response_detail = $client_detal->get('discussions/'.$discussion_id);
        $discussion = Json::decode($response_detail->getBody());

        $meta_tag_value = $discussion['data']['title'];
        $meta_tag_desc =  strip_tags($discussion['data']['description']);

        $title = [
            '#tag' => 'meta',
            '#attributes' => [
                'property' => 'og:title',
                'content' => $meta_tag_value,
            ],
        ];

      $og_desc = [
          '#tag' => 'meta',
          '#attributes' => [
              'property' => 'og:description',
              'content' => $meta_tag_desc,
          ],
      ];

       $variables['page']['#attached']['html_head'][] = [$title, 'title'];
       $variables['page']['#attached']['html_head'][] = [$og_desc, 'description'];
      }
    }
}

/**
 * Implements hook_js_alter().
 */
function athena_js_alter(&$javascript, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
  $current_path = \Drupal::service('path.current')->getPath();
  if($current_path == "/registration") {
    unset($javascript['themes/custom/athena/prodbundled.js']);
  }
}
