<?php

use \Drupal\athena_library\Utils\CommonHelper;
use Drupal\node\NodeTypeInterface;
use Drupal\node\Entity\NodeType;
use \Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Entity\Display\EntityViewDisplayInterface;


/**
 * Put dots if string has more than chars.
 */
function put_dots_in_string($string, $length, $html_decode = TRUE) {
    $string = trim($string);
    $string = str_replace('<p class="small"></p>', '', $string);
    if (empty($string)) {
        return $string;
    }

    if ($html_decode) {
        $string = html_entity_decode($string);
    }
    if (strlen($string) > $length) {
        $string = substr($string, 0, $length);
        $string = $string . '...';
        return $string;
    }
    return $string;
}

/**
 * Get Static data.
 */
function get_static_data($key, $textarea = FALSE) {
    $data = CommonHelper::getConfigSettings('athena_library.common_settings', $key);
    if ($textarea) {
        return $data['value'];
    }
    return $data;
}

/**
 * Get Course navigation items
 */
function get_course_nav_items($type = 'Academic') {
    if(!in_array($type, ['Academic', 'Certifications'])) {
        return [];
    }

    $page = 'page_1';
    if($type == 'Certifications') {
        $page = 'page_2';
    }

    $data_0 = $data_1 = $data = [];
    if(db_table_exists('draggableviews_structure')) {
        $query = \Drupal::database()->select('node_field_data', 'n');
        $query->leftJoin('draggableviews_structure', 'w', 'w.entity_id = n.nid');
        $query->innerJoin('node__field_course_category', 'c', 'c.entity_id = n.nid');
        $query
        ->fields('n', array('nid'))
        ->condition('c.field_course_category_value', $type)
        ->condition('c.bundle', 'course')
        ->condition('n.status', 1)
        ->condition('n.type', 'course')
        ->condition('w.view_name', 'course_ordering')
        ->condition('w.view_display', $page)
        ->orderBy('w.weight', ASC);
        $data_0 = $query->execute()->fetchAllKeyed(0, 0);
    } else {
        $query = \Drupal::database()->select('node_field_data', 'n');
        $query->innerJoin('node__field_course_category', 'c', 'c.entity_id = n.nid');
        $query
        ->fields('n', array('nid'))
        ->condition('c.field_course_category_value', $type)
        ->condition('c.bundle', 'course')
        ->condition('n.status', 1)
        ->condition('n.type', 'course')
        ->orderBy('n.created', DESC);
        $data_0 = $query->execute()->fetchAllKeyed(0, 0);
        return  $data_0;
    }

    if(!empty($data_0)) {
        $query = \Drupal::database()->select('node_field_data', 'n');
        $query->innerJoin('node__field_course_category', 'c', 'c.entity_id = n.nid');
        $query
        ->fields('n', array('nid'))
        ->condition('c.field_course_category_value', $type)
        ->condition('c.bundle', 'course')
        ->condition('n.status', 1)
        ->condition('n.nid', $data_0, 'NOT IN')
        ->condition('n.type', 'course')
        ->orderBy('n.created', DESC);
        $data_1 = $query->execute()->fetchAllKeyed(0, 0);
    }

    $data = is_array($data_1) && !empty($data_1) ? array_merge($data_1 , $data_0) : $data_0;
    return  $data;
}





/**
 * Implements hook_theme().
 */
function athena_library_theme($existing, $type, $theme, $path) {
    return [
    'custom_generic_faq_block' => [
      'variables' => [
      'faqs' => NULL,
      'title' => NULL,
      ],
      'template' => 'custom-generic-faq',
    ],
  ];
}

function athena_library_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
    if ($entity->getType() == 'insights_viewpages' && $view_mode == 'full') {
      $build['#cache']['max-age'] = 0;
    }
  }
